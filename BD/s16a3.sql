--üî∏PARTE 1: Revis√£o das propriedades ACID (te√≥rica, n√£o h√° c√≥digo)
-- Esta parte exige uma explica√ß√£o te√≥rica, mas vamos traduzir para coment√°rios no c√≥digo para refer√™ncia.
-- Atomicidade: Garante que uma transa√ß√£o seja tratada como uma √∫nica opera√ß√£o. Ou ela √© totalmente executada (COMMIT) ou totalmente desfeita (ROLLBACK). N√£o h√° estado parcial.
-- Consist√™ncia: Garante que a transa√ß√£o leve o banco de dados de um estado v√°lido para outro.
-- Isolamento: Garante que a execu√ß√£o de uma transa√ß√£o n√£o seja vis√≠vel para outras transa√ß√µes concorrentes at√© que ela seja conclu√≠da. √â como se cada transa√ß√£o estivesse sendo executada sozinha.
-- Durabilidade: Garante que, uma vez que uma transa√ß√£o √© confirmada (COMMIT), suas altera√ß√µes persistem permanentemente, mesmo em caso de falha do sistema.
--
--üî∏PARTE 2 - Implementa√ß√£o pr√°tica.
-- A primeira etapa √© criar um banco de dados para a empresa FastTech e selecion√°-lo.
-- Geralmente, o comando CREATE DATABASE n√£o √© parte de uma transa√ß√£o, pois ele define a estrutura b√°sica.
CREATE DATABASE fasttech;

USE fasttech;

-- Segunda parte: Implementa√ß√£o de controle de transa√ß√µes
-- O pr√≥ximo passo √© criar a tabela `pedidos` conforme especificado no anexo.
-- Esta tabela armazenar√° os pedidos da plataforma de vendas online.
-- Note a defini√ß√£o de colunas, tipos de dados e a chave prim√°ria.
   CREATE TABLE pedidos (
          id INT AUTO_INCREMENT PRIMARY KEY,
          cliente VARCHAR(100),
          produto VARCHAR(100),
          quantidade INT,
          valor DECIMAL(10, 2),
          status VARCHAR(20) DEFAULT 'Pendente'
          );

-- Agora, vamos simular a inser√ß√£o de um pedido e, em seguida, desfaz√™-lo com ROLLBACK.
-- Isso demonstra a propriedade de Atomicidade: ou a transa√ß√£o √© completa, ou n√£o acontece nada.
-- O comando START TRANSACTION inicia a transa√ß√£o.
-- A instru√ß√£o INSERT insere os dados do pedido.
-- O comando ROLLBACK desfaz todas as altera√ß√µes feitas desde o START TRANSACTION.
START TRANSACTION;

-- Inserimos um pedido para 'Jo√£o Silva'
   INSERT INTO pedidos (cliente, produto, quantidade, valor)
   VALUES ('Jo√£o Silva', 'Notebook', 1, 3500.00);

-- O ROLLBACK desfaz a inser√ß√£o acima, como se ela nunca tivesse ocorrido.
-- Se voc√™ consultar a tabela agora, este pedido n√£o estar√° l√°.
ROLLBACK;

-- Vamos verificar se o pedido de 'Jo√£o Silva' foi realmente desfeito.
-- A sa√≠da desta consulta deve ser vazia.
   SELECT *
     FROM pedidos;

-- Em seguida, vamos inserir um novo pedido com sucesso e confirm√°-lo com COMMIT.
-- Isso garante que as altera√ß√µes se tornem permanentes no banco de dados,
-- demonstrando a propriedade de Durabilidade.
-- A transa√ß√£o come√ßa com START TRANSACTION.
START TRANSACTION;

-- Inserimos um pedido para 'Maria Souza'.
   INSERT INTO pedidos (cliente, produto, quantidade, valor)
   VALUES ('Maria Souza', 'Smartphone', 2, 2000.00);

-- O COMMIT confirma todas as altera√ß√µes desde o START TRANSACTION, tornando-as
-- permanentes e vis√≠veis para outras transa√ß√µes.
COMMIT;

-- Vamos verificar se o pedido de 'Maria Souza' foi persistido.
-- A sa√≠da desta consulta deve mostrar o pedido inserido.
   SELECT *
     FROM pedidos;

-- Parte 3: Simula√ß√£o de falha e recupera√ß√£o de dados
-- A seguir, simulamos uma falha no meio de uma transa√ß√£o para demonstrar
-- como o banco de dados reage e como o ROLLBACK √© essencial para a recupera√ß√£o.
-- A transa√ß√£o come√ßa com START TRANSACTION.
START TRANSACTION;

-- Inserimos um pedido v√°lido para 'Carlos Lima'.
-- A princ√≠pio, esta opera√ß√£o √© bem-sucedida.
   INSERT INTO pedidos (cliente, produto, quantidade, valor)
   VALUES ('Carlos Lima', 'Tablet', 1, 1500.00);

-- Aqui, simulamos uma falha ao tentar inserir um pedido com dados inv√°lidos.
-- Por exemplo, um cliente com valor NULL e uma quantidade negativa.
-- Isso representaria uma inconsist√™ncia ou erro de l√≥gica.
-- O banco de dados pode ou n√£o permitir essa inser√ß√£o, mas em um sistema real,
-- a l√≥gica de neg√≥cio impediria isso, levando a uma decis√£o de ROLLBACK.
   INSERT INTO pedidos (cliente, produto, quantidade, valor)
   VALUES (NULL, 'Smartwatch', -1, 500.00);

-- O ROLLBACK √© executado, desfazendo tanto a inser√ß√£o v√°lida de 'Carlos Lima'
-- quanto a inser√ß√£o inv√°lida do 'Smartwatch'.
-- Isso garante que a integridade dos dados seja mantida,
-- pois nenhuma das opera√ß√µes parciais ser√° salva.
ROLLBACK;

-- Agora, vamos verificar se os dados est√£o consistentes e se as altera√ß√µes
-- foram de fato revertidas.
-- A sa√≠da desta consulta deve mostrar apenas o pedido de 'Maria Souza',
-- pois os pedidos de 'Jo√£o Silva' e 'Carlos Lima' foram desfeitos.
   SELECT *
     FROM pedidos;

--üî∏PARTE 3 - Respostas as quest√µes
-- A partir daqui, as partes 4 e 5 s√£o de discuss√£o e reflex√£o, n√£o requerem c√≥digo.
-- A seguir est√£o as respostas para as perguntas propostas na Parte 4.
--
-- Descreva o impacto da utiliza√ß√£o de transa√ß√µes e as propriedades ACID no contexto de sistemas transacionais, como o e-commerce.
-- Resposta: As transa√ß√µes e as propriedades ACID s√£o fundamentais para garantir a integridade e a confiabilidade de sistemas transacionais. No e-commerce, por exemplo, uma transa√ß√£o de pedido envolve v√°rias etapas (ex: debitar do estoque, processar o pagamento, inserir o pedido). Se uma dessas etapas falhar, as propriedades ACID garantem que todas as outras sejam desfeitas (Atomicidade), evitando inconsist√™ncias como um produto debitado do estoque, mas n√£o cobrado do cliente.
--
-- Por que √© importante garantir a integridade dos dados em todas as opera√ß√µes?
-- Resposta: A integridade dos dados √© crucial para evitar erros financeiros e operacionais. No e-commerce, dados inconsistentes podem levar a cobran√ßas duplicadas, produtos que n√£o foram enviados, ou a um estoque que n√£o reflete a realidade, causando preju√≠zos financeiros e insatisfa√ß√£o do cliente.
--
-- Como o ROLLBACK pode ajudar na recupera√ß√£o de erros no ambiente de produ√ß√£o?
-- Resposta: O ROLLBACK √© uma ferramenta vital para a recupera√ß√£o de erros. Se um problema inesperado (como um erro de sistema, viola√ß√£o de regra de neg√≥cio ou falha de conex√£o) ocorrer no meio de uma transa√ß√£o, o ROLLBACK reverte todas as altera√ß√µes incompletas, restaurando o banco de dados para seu estado original e consistente. Isso evita que dados corrompidos ou parciais sejam salvos, facilitando a recupera√ß√£o e a estabilidade do sistema.
--
-- Explique a import√¢ncia de COMMIT no controle de transa√ß√µes e na durabilidade dos dados.
-- Resposta: O COMMIT √© o comando que confirma o sucesso de uma transa√ß√£o. Ele √© essencial porque torna as altera√ß√µes permanentes no banco de dados, garantindo que os dados n√£o sejam perdidos mesmo em caso de falhas subsequentes do sistema. Isso est√° diretamente ligado √† propriedade de Durabilidade, assegurando que o que foi salvo, permanece salvo. Sem o COMMIT, as altera√ß√µes seriam tempor√°rias e poderiam ser facilmente desfeitas.